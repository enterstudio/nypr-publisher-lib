{{md-text text="
### Adapters

For the most part, the adapters are straightforward and mostly serve to make sure the outgoing request has uses the correct pathname, but the parts worth mentioning are expanded upon below.

Two general notes:

- The publisher backend requires a trailing slash
- Upstream apps should take care to import/export and add mixins to any adapters that might require auth headers. For instance:
  ```javascript
  // your-app/app/adapters/story.js
  import StoryAdapter from 'nypr-publisher-lib/adapters/story';
  import DataAdapterMixin from 'ember-simple-auth/mixins/data-adapter-mixin';

  export default StoryAdapter.extend(DataAdapterMixin);
  ```

#### Story Adapter

- Stories set to draft mode can be accessed via a series of query params provided by the publisher admin panel. The adapter is set up to check for these on the passed in slug.
- Stories are available from the backend via slug or ID using distinct endpoints. The adapter is configured to use the correct pathanme based on the incoming parameter: If it's an integer, it uses the ID endpoint, otherwise it uses the slug endpoint.
- Publisher uses a SOLR instance to provided \"related\" stories, which upstream apps an access using the `query` method on the store. More below.

##### Getting Related Stories
Ask for related stories from the SOLR backend using `query` with a related parameter:
```javascript
export default Router.extend({
  model() {
    this.store.query('story', {
      related: { itemId: story.get('cmsPK'), limit: 5 }
    });
  }
})
```

#### Stream Adapter
Streams as a cms object are just metadata like the name, logo, and urls to access the audio access. More useful would be to know what's actually airing at the current moment on a given stream. To this end, the stream adapter makes an additional request to the `whats_on` endpoint in order to include infromation about the currently airing story.
"}}
{{code-snippet name="stream-find-record.js"}}
